generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  PARENT
  INSTRUCTOR
  ADMIN
}

enum BookingStatus {
  RESERVED
  PAID
  CANCELLED
  REFUNDED
}

enum BackgroundCheckStatus {
  PENDING
  CLEAR
  FLAGGED
  EXPIRED
}

enum PageStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  password          String?
  clerkId           String?             @unique
  role              Role
  name              String?
  phone             String?
  address           String?
  marketingOptIn    Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  children          Child[]
  instructorProfile InstructorProfile?
  bookings          Booking[]
  reviews           Review[]
  sessions          Session[]
}

model Child {
  id        String   @id @default(cuid())
  parentId  String
  name      String
  birthdate DateTime
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  parent    User     @relation(fields: [parentId], references: [id])
  bookings  BookingChild[]
}

model InstructorProfile {
  id                 String                @id @default(cuid())
  userId             String                @unique
  bio                String?
  crafts             String[]
  portfolioMedia     Json?
  verificationStatus BackgroundCheckStatus @default(PENDING)
  ratingAvg          Float                 @default(0)
  ratingCount        Int                   @default(0)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  
  // Relations
  user               User                  @relation(fields: [userId], references: [id])
  classes            Class[]
  backgroundChecks   BackgroundCheck[]
  payouts            Payout[]
  reviews            Review[]
}

model Venue {
  id        String   @id @default(cuid())
  name      String
  address   String
  lat       Float
  lng       Float
  capacity  Int
  contact   String?
  photos    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  classes   Class[]
  reviews   Review[]
  
  @@index([lat, lng])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  icon      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  classes   Class[]
}

model Class {
  id                String   @id @default(cuid())
  title             String
  categoryId        String
  ageMin            Int
  ageMax            Int
  description       String   @db.Text
  instructorId      String
  venueId           String
  capacity          Int
  priceCents        Int
  materialsProvided Boolean  @default(true)
  images            Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  category          Category          @relation(fields: [categoryId], references: [id])
  instructor        InstructorProfile @relation(fields: [instructorId], references: [id])
  venue             Venue             @relation(fields: [venueId], references: [id])
  schedules         ClassSchedule[]
  reviews           Review[]
  
  @@index([categoryId])
  @@index([instructorId])
  @@index([venueId])
  @@index([ageMin, ageMax])
}

model ClassSchedule {
  id             String    @id @default(cuid())
  classId        String
  startsAt       DateTime
  endsAt         DateTime
  timezone       String    @default("America/New_York")
  seatsTotal     Int
  seatsRemaining Int
  recurrenceRule String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  class          Class     @relation(fields: [classId], references: [id])
  bookings       Booking[]
  
  @@index([startsAt])
  @@index([classId])
}

model Booking {
  id               String        @id @default(cuid())
  scheduleId       String
  parentId         String
  amountCents      Int
  status           BookingStatus @default(RESERVED)
  paymentIntentId  String?
  stripeSessionId  String?
  receiptUrl       String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  // Relations
  schedule         ClassSchedule @relation(fields: [scheduleId], references: [id])
  parent           User          @relation(fields: [parentId], references: [id])
  children         BookingChild[]
  
  @@index([parentId])
  @@index([scheduleId])
  @@index([status])
}

model BookingChild {
  bookingId String
  childId   String
  
  // Relations
  booking   Booking @relation(fields: [bookingId], references: [id])
  child     Child   @relation(fields: [childId], references: [id])
  
  @@id([bookingId, childId])
}

model Review {
  id         String   @id @default(cuid())
  parentId   String
  targetType String   // "Class" | "Instructor" | "Venue"
  targetId   String
  rating     Int      // 1-5
  title      String
  body       String   @db.Text
  verified   Boolean  @default(false)
  flagged    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  parent     User              @relation(fields: [parentId], references: [id])
  class      Class?            @relation(fields: [targetId], references: [id], map: "Review_class_targetId_fkey")
  instructor InstructorProfile? @relation(fields: [targetId], references: [id], map: "Review_instructor_targetId_fkey")
  venue      Venue?            @relation(fields: [targetId], references: [id], map: "Review_venue_targetId_fkey")
  
  @@index([targetType, targetId])
  @@index([parentId])
  @@index([rating])
}

model Page {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       String
  status      PageStatus @default(DRAFT)
  seo         Json
  blocks      Json
  publishAt   DateTime?
  version     Int        @default(1)
  createdBy   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  versions    PageVersion[]
  
  @@index([status])
  @@index([slug])
}

model PageVersion {
  id        String   @id @default(cuid())
  pageId    String
  version   Int
  title     String
  status    PageStatus
  seo       Json
  blocks    Json
  createdBy String?
  createdAt DateTime @default(now())
  
  // Relations
  page      Page     @relation(fields: [pageId], references: [id])
  
  @@unique([pageId, version])
}

model Asset {
  id          String   @id @default(cuid())
  kind        String   // "image" | "doc" | "video"
  url         String
  alt         String?
  attribution String?
  size        Int?
  mimeType    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BackgroundCheck {
  id           String                @id @default(cuid())
  instructorId String
  provider     String
  status       BackgroundCheckStatus
  tokenRef     String                @unique
  checkDetails Json?
  expiresAt    DateTime
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  
  // Relations
  instructor   InstructorProfile     @relation(fields: [instructorId], references: [id])
  
  @@index([instructorId])
  @@index([status])
}

model Payout {
  id            String       @id @default(cuid())
  instructorId  String
  amountCents   Int
  status        PayoutStatus @default(PENDING)
  providerRef   String?
  processedAt   DateTime?
  failureReason String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  instructor    InstructorProfile @relation(fields: [instructorId], references: [id])
  
  @@index([instructorId])
  @@index([status])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([token])
}
