// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  PARENT
  INSTRUCTOR
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum VerificationStatus {
  PENDING
  IN_REVIEW
  CLEAR
  FLAGGED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  clerkId   String?  @unique
  role      UserRole @default(PARENT)
  phone     String?
  address   String?
  avatarUrl String?
  bio       String?

  // Relationships
  parentProfile     ParentProfile?
  instructorProfile InstructorProfile?
  bookings          Booking[]
  reviews           Review[]
  messages          Message[]
  pages             Page[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ParentProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  childrenAges Int[]
  interests    String[]
  preferences  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InstructorProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  crafts            String[]
  experience        Int // years
  certifications    String[]
  languages         String[]
  availability      Json?
  portfolioMedia    Json?
  backgroundCheck   DateTime?
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt        DateTime?
  
  // Ratings
  ratingAvg   Float @default(0)
  ratingCount Int   @default(0)

  // Relationships
  classes Class[]
  venues  Venue[]
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Venue {
  id          String @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  country     String @default("US")
  
  description String?
  amenities   String[]
  images      String[]
  capacity    Int
  
  // Location
  latitude  Float?
  longitude Float?
  
  // Relationships
  instructorId String
  instructor   InstructorProfile @relation(fields: [instructorId], references: [id])
  classes      Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id          String @id @default(cuid())
  title       String
  description String
  
  // Details
  ageMin      Int
  ageMax      Int
  skillLevel  String
  maxStudents Int
  duration    Int // minutes
  price       Int // cents
  
  // Media
  images      String[]
  materials   String[]
  
  // Relationships
  instructorId String
  instructor   InstructorProfile @relation(fields: [instructorId], references: [id])
  
  venueId     String
  venue       Venue @relation(fields: [venueId], references: [id])
  
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  
  ageRangeId  String?
  ageRange    AgeRange? @relation(fields: [ageRangeId], references: [id])
  
  schedules   ClassSchedule[]
  bookings    Booking[]
  reviews     Review[]
  
  // Status
  isActive    Boolean @default(true)
  isFeatured  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassSchedule {
  id      String   @id @default(cuid())
  classId String
  class   Class    @relation(fields: [classId], references: [id])
  
  startsAt DateTime
  endsAt   DateTime
  
  seatsTotal     Int
  seatsAvailable Int
  seatsReserved  Int @default(0)
  
  // Relationships
  bookings Booking[]
  
  isCancelled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  icon        String?
  color       String?
  
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  
  classes Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgeRange {
  id          String @id @default(cuid())
  name        String @unique
  min         Int
  max         Int
  description String?
  
  classes Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id         String        @id @default(cuid())
  bookingRef String        @unique
  
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  
  scheduleId String
  schedule   ClassSchedule @relation(fields: [scheduleId], references: [id])
  
  classId    String
  class      Class         @relation(fields: [classId], references: [id])
  
  status     BookingStatus @default(PENDING)
  
  // Participants
  adultsCount   Int @default(1)
  childrenCount Int @default(1)
  childrenAges  Int[]
  
  // Payment
  totalPrice    Int // cents
  paymentIntent String?
  paidAt        DateTime?
  
  // Communication
  notes         String?
  specialNeeds  String?
  
  // Timestamps
  confirmedAt   DateTime?
  cancelledAt   DateTime?
  completedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id       String @id @default(cuid())
  rating   Int    // 1-5
  comment  String
  
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  
  classId  String?
  class    Class? @relation(fields: [classId], references: [id])
  
  instructorId String?
  instructor   InstructorProfile? @relation(fields: [instructorId], references: [id])
  
  bookingId String?  @unique
  
  isVerified Boolean @default(false)
  helpfulCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id       String @id @default(cuid())
  content  String
  
  senderId String
  sender   User   @relation(fields: [senderId], references: [id])
  
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  
  isRead Boolean @default(false)
  readAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id           String    @id @default(cuid())
  participants String[]
  lastMessage  String?
  lastMessageAt DateTime?
  
  messages Message[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Page {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  seo       Json
  blocks    Json[]
  status    String   @default("draft")
  publishAt DateTime?
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String
  content   String
  
  featuredImage String?
  category      String
  tags          String[]
  
  seo       Json
  status    String   @default("draft")
  publishAt DateTime?
  
  authorId  String
  
  views     Int      @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
